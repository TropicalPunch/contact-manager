{"version":3,"sources":["Context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/TEST/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","e","onDeleteClick","delete","_this2","_this$props","name","email","phone","className","onClick","style","cursor","float","padding","bind","color","fontSize","Link","to","Contacts","Fragment","contacts_Contact","TextInputGroup","_ref","error","lable","placeholder","onChange","htmlFor","classnames","is-invalid","defaultProps","AddContact","errors","onSubmit","_this$state","newContact","preventDefault","abrupt","post","history","push","defineProperty","target","_this$state2","layout_TextInputGroup","EditContact","updateContact","match","params","put","Header","branding","href","About","NotFound","Test","title","body","fetch","then","response","json","App","Context_Provider","HashRouter","layout_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5e86dd7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n//this is part of context reducer\r\nconst reducer = (state, action) => {\r\n switch (action.type){\r\n     case 'DELETE_CONTACT':\r\n     return{\r\n         ...state, \r\n         contacts: state.contacts.filter(\r\n             contact => contact.id !== action.payload\r\n         )\r\n     };\r\n     //in order to add contacts by pressing submit\r\n     case 'ADD_CONTACT':\r\n     return{\r\n         ...state, \r\n         contacts: [action.payload,\r\n        ...state.contacts]\r\n         \r\n        };\r\n         //in order to update contacts data  :\r\n         //if the contact id the is being update equal to the one's payload sent than the new contact will be update else it wont\r\n         //id passes directly from the res.data === for there we take action.payload.id\r\n     case 'UPDATE_CONTACT':\r\n     return{\r\n         ...state, \r\n         contacts: state.contacts.map(contact => \r\n            contact.id === action.payload.id ? \r\n            (contact = action.payload): contact)\r\n           \r\n        };\r\n     default:\r\n     return state;\r\n }\r\n\r\n};\r\nexport class Provider extends Component {\r\n\r\n    state={\r\n        contacts: [\r\n\r\n         /*   {\r\n                id:1,\r\n                name:\" ori souch \", \r\n                email:\"ori@gmail.com\",\r\n                 phone:\"124223544\"\r\n            },\r\n            {\r\n                id:2,\r\n                name:\" avi souch \", \r\n                email:\"avi@gmail.com\",\r\n                 phone:\"124223544\"\r\n            },\r\n            {\r\n                id:3,\r\n                name:\" ami souch \", \r\n                email:\"ami@gmail.com\",\r\n                 phone:\"124223544\"\r\n            }\r\n            */\r\n        ],\r\n        //this is part of context reducer:\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n        \r\n    };\r\n\r\n     //HTTP CALL FOR ADDING 10 BASE CONTACTS USING AXIOS:\r\n     /*\r\n    componentDidMount(){\r\n       axios.get('https://jsonplaceholder.typicode.com/users')\r\n       .then(res => this.setState({contacts: res.data}) )    \r\n\r\n    }\r\n    */\r\n\r\n    //OR~~!!!!!!!!\r\n\r\n      //HTTP CALL FOR ADDING 10 BASE CONTACTS USING ASYNC/AWAIT\r\n    async componentDidMount(){\r\n      const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n       \r\n      this.setState({contacts: res.data})  \r\n \r\n     }\r\n\r\n    render(){\r\n        return(\r\n            <Context.Provider value={this.state}>\r\n            {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {Consumer} from '../../Context.js';\r\nimport axios from 'axios';\r\n\r\n class Contact extends Component {\r\n    state={\r\n      showContactInfo: false,  \r\n    };\r\n    //must use e!!!\r\n    onShowClick = e => {\r\n        //enable toggle state.showContactInfo: true/false when using function\r\n        //must use setState methot in order to make changes in the state\r\n        this.setState(\r\n            {showContactInfo: !this.state.showContactInfo}\r\n        );\r\n    };\r\n\r\n\r\n\r\n    //DELETE CONTACTS HTTP CALL USING AXIUS:\r\n    /*\r\n    onDeleteClick = (id, dispatch) => {\r\n        // was deleted a part of the context api and context reducer\r\n        //enable us to delete a contact\r\n        //must use setState methot in order to make changes in the state\r\n        //this.props.deleteClickHandler();\r\n        \r\n       axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n        .then(res =>  dispatch({ type:'DELETE_CONTACT', payload: id }));\r\n\r\n     //  dispatch({ type:'DELETE_CONTACT', payload: id });\r\n    \r\n    };\r\n    */\r\n    \r\n    //OR======!!!!!\r\n    //DELETE CONTACTS HTTP CALL USING ASYNC/AWAIT:\r\n \r\n    //WE WILL WRITE ASYNC BEFORE THE ARROW FUNC'S ARGUMENTS!!!\r\n    onDeleteClick = async (id, dispatch) => {\r\n       \r\n      //no need to assign a variable because delete a contact gives a blank objest!!! ==>\r\n      //no need for ==>  const res =\r\n         await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n          dispatch({ type:'DELETE_CONTACT', payload: id });\r\n\r\n     \r\n    \r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n      //destructure this.props.name/email/phone/id:\r\n      const {name, email, phone, id} = this.props;\r\n      const {showContactInfo} = this.state;\r\n\r\n\r\n    return (\r\n        <Consumer>\r\n            {value =>{\r\n                const {dispatch} = value;\r\n               \r\n                return (\r\n                    <div className=\"crad card-body mb-3\">\r\n                    <h4>{name} \r\n                    <i onClick={this.onShowClick} className=\"fas fa-angle-down\" style= {{cursor: 'pointer', float:'left',padding:'5px'}}  />\r\n                    <i onClick={this.onDeleteClick.bind(this,id,dispatch)}  className=\"fas fa-trash \" style= {{cursor: 'pointer', float: 'right', color:'grey', fontSize:'15px' }} />\r\n                    \r\n                    <Link to={`contact/edit/${id}`}>\r\n                    <i className=\"fas fa-pencil-alt\" style={{ cursor:'pointer',padding:'5px', fontSize:12}}></i>\r\n                    </Link>\r\n                    </h4> \r\n                    \r\n                    {//show/ dont show content\r\n                        showContactInfo ?\r\n                         (<ul className=\"list-group\">\r\n                        <li className=\"list-group-item\">Email:{email} </li>\r\n                        <li className=\"list-group-item\">phone:{phone}</li>\r\n                        \r\n                        </ul>) : null\r\n                     }\r\n                  </div>\r\n                )\r\n            } }\r\n        </Consumer>\r\n\r\n/* we took it into the consumer due to content reducer\r\n  <div className=\"crad card-body mb-3\">\r\n        <h4>{name} \r\n        <i onClick={this.onShowClick} className=\"fas fa-angle-down\" style= {{cursor: 'pointer', float:'left',padding:'5px'}}  />\r\n        <i onClick={this.onDeleteClick}  className=\"fas fa-trash \" style= {{cursor: 'pointer', float: 'right', color:'grey', fontSize:'15px' }} />\r\n        </h4> \r\n        \r\n        {//show/ dont show content\r\n            showContactInfo ?\r\n             (<ul className=\"list-group\">\r\n            <li className=\"list-group-item\">Email:{email} </li>\r\n            <li className=\"list-group-item\">phone:{phone}</li>\r\n            \r\n            </ul>) : null\r\n         }\r\n      </div>\r\n    \r\n      */\r\n    );\r\n  }\r\n}\r\n\r\nContact.propTypes = {\r\n    name:PropTypes.string.isRequired,\r\n    phone:PropTypes.string.isRequired,\r\n    email:PropTypes.string.isRequired,\r\n/* was deleted a part of the context api and context reducer\r\n    deleteClickHandler: PropTypes.func.isRequired */\r\n}\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact.js';\r\nimport { Consumer } from '../../Context.js';\r\n\r\nclass Contacts extends Component {\r\n    \r\n/* was deleted a part of the context api and context reducer\r\n    deleteContact = (id) => {\r\n        //console.log(id); => when clicked it will log out the id of the contact clicked the trash icon\r\n        const {contacts} = this.state;\r\n        //newContacts will contain all contact except the one with the id that was clicked to be deleted\r\n        const newContacts = contacts.filter(contact => contact.id !== id);\r\n        //now we will update the state object:\r\n        this.setState({\r\n             contacts: newContacts\r\n         })\r\n\r\n    };\r\n*/\r\n  render() {\r\n      return(\r\n          <Consumer>\r\n              \r\n              {value => { //value = this.state (see context.js)\r\n                  //destructure: pull contacts objects from value\r\n                  // if we didnt do destructure we could have access using value.contact\r\n                  const {contacts} = value;\r\n                  return(\r\n                    <React.Fragment>\r\n                    <h1 className=\"display-4 mb-2\">\r\n                    Contact List\r\n                    </h1>\r\n                    <div>\r\n                    {contacts.map(contact => (\r\n                        <Contact key={contact.id} name={contact.name} email={contact.email} phone={contact.phone} id={contact.id}\r\n                        /* this property was deleted a part of the context api and context reducer : deleteClickHandler={this.deleteContact.bind(this,contact.id)} */ \r\n                        />\r\n                    ))}\r\n                  </div>\r\n                  </React.Fragment>\r\n                  )\r\n                  }\r\n                 }\r\n             </Consumer>\r\n      )}\r\n\r\n     \r\n\r\n\r\n/*    \r\nwhat we had before the use of context\r\nconst {contacts} = this.state;\r\n    return (\r\n      <div>\r\n        {contacts.map(contact => (\r\n            <Contact key={contact.id} name={contact.name} email={contact.email} phone={contact.phone} deleteClickHandler={this.deleteContact.bind(this,contact.id)}/>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n*/\r\n}\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({error,lable,name,value,placeholder,type,onChange}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n         <label htmlFor={name}>{lable}</label>\r\n         <input onChange={onChange} value={value} className={classnames('form-control form-control-lg', {'is-invalid': error})} type={type} name={name} placeholder={placeholder}/>\r\n        {error && <div className=\"invalid-feedback\" >{error}</div>}\r\n    </div>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nTextInputGroup.propTypes = {\r\n    lable: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error:PropTypes.string\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\n\r\nexport default  TextInputGroup;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../Context.js';\r\nimport TextInputGrop from '../layout/TextInputGroup.js'\r\n//import uuid from 'uuid';\r\n\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n\r\n    state={\r\n        name:'',\r\n        email:'',\r\n        phone:'',\r\n        errors:{}\r\n    };\r\n\r\n\r\n//enable us to submit form when button clicked\r\n    onSubmit = async (dispatch ,e) => {\r\n        e.preventDefault();\r\n       // console.log(this.state);\r\n       const {name, email, phone} = this.state;\r\n\r\n        \r\n       //check for errors: balnk submission of fields \r\n       if(name === '') {\r\n        this.setState({errors: { name: 'name is required'}});\r\n        return;\r\n       }\r\n\r\n       if(email === '') {\r\n        this.setState({errors: { email: 'email is required'}});\r\n        return;\r\n       }\r\n\r\n       if(phone === '') {\r\n        this.setState({errors: { phone: 'phone is required'}});\r\n        return;\r\n       }\r\n\r\n       const newContact = {\r\n          // id: uuid(), //will generate random id for user\r\n           name,\r\n           email,\r\n           phone\r\n       };\r\n       //HTTP CALL FOR ADDING A CONTACT USING AXIOS only!!\r\n     //  axios.post('https://jsonplaceholder.typicode.com/users', newContact)\r\n     //  .then(res => //lets call the dispatch function \r\n      //  dispatch({ type:'ADD_CONTACT', payload: res.data }) )\r\n\r\n\r\n        // //HTTP CALL FOR ADDING A CONTACT USING ASYNC/AWAIT\r\n       const res = await axios\r\n       .post('https://jsonplaceholder.typicode.com/users', newContact)\r\n       //lets call the dispatch function \r\n        dispatch({ type:'ADD_CONTACT', payload: res.data }) \r\n\r\n\r\n      /*\r\n      //lets call the dispatch function \r\n      dispatch({ type:'ADD_CONTACT', payload: newContact }) ;\r\n      */\r\n\r\n       //clear  form's fields after addition\r\n       this.setState({\r\n        name:'',\r\n        email:'',\r\n        phone:'',\r\n        errors:{}\r\n       })\r\n\r\n       this.props.history.push('/');\r\n\r\n\r\n    };\r\n//enable us to fill form\r\n     onChange = e => {this.setState({ [e.target.name]:\r\n        e.target.value });\r\n      /* we also could have done for each input:\r\n       onNameChange = (e) => {this.setState({name: e.target.value})\r\n        onPhoneChange = (e) => {this.setState({phone: e.target.value})\r\n        onmaileChange = (e) => {this.setState({email: e.target.value})\r\n       console.log(e.target.value) => the value the user enter\r\n     console.log(e.target.name)=> the speciic form line name=(phone, name,email) the user typed in\r\n     */\r\n     }\r\n\r\n  render() {\r\n\r\n      const {name, phone, email,errors}= this.state;\r\n\r\n\r\n      return(\r\n          <Consumer>\r\n              {value => {\r\n                  const {dispatch} = value;\r\n                  return(\r\n                    <div className=\"card mb-3\">\r\n                    <div className=\"card-header\">Add Contact</div> {/*this is the header*/}\r\n                    <div className=\"card-body\">{/*this is the body*/}\r\n                        <form onSubmit={this.onSubmit.bind(this,dispatch)} >\r\n                        <TextInputGrop \r\n                       error={errors.name} lable=\"Name\" name=\"name\" placeholder=\"enter contact's name...\" value={name} onChange={this.onChange}/>\r\n                         {/* we took it to TextInputGrop.js\r\n                           <div className=\"form-group\">\r\n                                <label htmlFor=\"name\">Name</label>\r\n                                <input onChange={this.onChange} value={name} className=\"form-control form-control-lg\" type=\"text\" name=\"name\" placeholder=\"Enter Contact's Name\"/>\r\n                            </div>  */}\r\n                         \r\n                         <TextInputGrop \r\n                        error={errors.email} lable=\"Email\" name=\"email\" placeholder=\"enter contact's email...\" value={email} onChange={this.onChange}/>\r\n                            {/*<div className=\"form-group\">\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <input onChange={this.onChange} value={email} className=\"form-control form-control-lg\" type=\"email\" name=\"email\" placeholder=\"Enter Contact's Email\"/>\r\n                        </div>*/} \r\n\r\n                        <TextInputGrop \r\n                         error={errors.phone} lable=\"phone\" name=\"phone\" placeholder=\"enter contact's phone...\" value={phone} onChange={this.onChange}/>\r\n                            {/*\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"phone\">Phone</label>\r\n                                <input onChange={this.onChange}  value={phone} className=\"form-control form-control-lg\" type=\"text\" name=\"phone\" placeholder=\"Enter Contact's Phone\"  />\r\n                            </div>*/}\r\n            \r\n                            <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-light btn-block\"/>{/*this is the submit button*/}\r\n                       \r\n                        </form>\r\n                    </div>\r\n                  </div>\r\n\r\n                  )\r\n\r\n              }}\r\n   \r\n          </Consumer>\r\n      \r\n      )\r\n\r\n    \r\n  }\r\n}\r\nexport default AddContact;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../Context.js';\r\nimport TextInputGrop from '../layout/TextInputGroup.js'\r\n//import uuid from 'uuid';\r\n\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n\r\n    state={\r\n        name:'',\r\n        email:'',\r\n        phone:'',\r\n        errors:{}\r\n    };\r\n\r\n    //edit a contact: fetch contacts data from beckend\r\n    async componentDidMount(){\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get (\r\n            `https://jsonplaceholder.typicode.com/users/${id}`\r\n            );\r\n        \r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    }\r\n\r\n\r\n//enable us to submit form when button clicked\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n       // console.log(this.state);\r\n       const {name, email, phone} = this.state;\r\n\r\n        \r\n       //check for errors: balnk submission of fields \r\n       if(name === ' ') {\r\n        this.setState({errors: { name: 'name is required'}});\r\n        return;\r\n       }\r\n\r\n       if(email === ' ') {\r\n        this.setState({errors: { email: 'email is required'}});\r\n        return;\r\n       }\r\n\r\n       if(phone === ' ') {\r\n        this.setState({errors: { phone: 'phone is required'}});\r\n        return;\r\n       }\r\n\r\n       //REQUEST FOR UPDATE USER \r\n       const updateContact = {\r\n           name,\r\n           email, \r\n           phone\r\n           //id passes directly from the res.data\r\n       }\r\n       const { id } = this.props.match.params;\r\n\r\n       const res = await axios.put(\r\n           `https://jsonplaceholder.typicode.com/users/${id}`,\r\n           updateContact\r\n       );\r\n       dispatch( {type:'UPDATE_CONTACT',payload: res.data} );\r\n       \r\n       //clear  form's fields after addition\r\n       this.setState({\r\n        name:'',\r\n        email:'',\r\n        phone:'',\r\n        errors:{}\r\n       })\r\n\r\n       this.props.history.push('/');\r\n\r\n\r\n    };\r\n//enable us to fill form\r\n     onChange = e => {this.setState({ [e.target.name]:\r\n        e.target.value });\r\n      /* we also could have done for each input:\r\n       onNameChange = (e) => {this.setState({name: e.target.value})\r\n        onPhoneChange = (e) => {this.setState({phone: e.target.value})\r\n        onmaileChange = (e) => {this.setState({email: e.target.value})\r\n       console.log(e.target.value) => the value the user enter\r\n     console.log(e.target.name)=> the speciic form line name=(phone, name,email) the user typed in\r\n     */\r\n     }\r\n\r\n  render() {\r\n\r\n      const {name, phone, email,errors}= this.state;\r\n\r\n\r\n      return(\r\n          <Consumer>\r\n              {value => {\r\n                  const {dispatch} = value;\r\n                  return(\r\n                    <div className=\"card mb-3\">\r\n                    <div className=\"card-header\">Edit Contact</div> {/*this is the header*/}\r\n                    <div className=\"card-body\">{/*this is the body*/}\r\n                        <form onSubmit={this.onSubmit.bind(this,dispatch)} >\r\n                        <TextInputGrop \r\n                       error={errors.name} lable=\"Name\" name=\"name\" placeholder=\"enter contact's name...\" value={name} onChange={this.onChange}/>\r\n                         {/* we took it to TextInputGrop.js\r\n                           <div className=\"form-group\">\r\n                                <label htmlFor=\"name\">Name</label>\r\n                                <input onChange={this.onChange} value={name} className=\"form-control form-control-lg\" type=\"text\" name=\"name\" placeholder=\"Enter Contact's Name\"/>\r\n                            </div>  */}\r\n                         \r\n                         <TextInputGrop \r\n                        error={errors.email} lable=\"Email\" name=\"email\" placeholder=\"enter contact's email...\" value={email} onChange={this.onChange}/>\r\n                            {/*<div className=\"form-group\">\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <input onChange={this.onChange} value={email} className=\"form-control form-control-lg\" type=\"email\" name=\"email\" placeholder=\"Enter Contact's Email\"/>\r\n                        </div>*/} \r\n\r\n                        <TextInputGrop \r\n                         error={errors.phone}lable=\"phone\" name=\"phone\" placeholder=\"enter contact's phone...\" value={phone} onChange={this.onChange}/>\r\n                            {/*\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"phone\">Phone</label>\r\n                                <input onChange={this.onChange}  value={phone} className=\"form-control form-control-lg\" type=\"text\" name=\"phone\" placeholder=\"Enter Contact's Phone\"  />\r\n                            </div>*/}\r\n            \r\n                            <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-light btn-block\"/>{/*this is the submit button*/}\r\n                       \r\n                        </form>\r\n                    </div>\r\n                  </div>\r\n\r\n                  )\r\n\r\n              }}\r\n   \r\n          </Consumer>\r\n      \r\n      )\r\n\r\n    \r\n  }\r\n}\r\nexport default EditContact;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\n//function Header() { or the arrow function way: \r\nconst Header = (props) => {\r\n    const {branding} = props ;\r\n  return (\r\n   <nav className= \"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\" >\r\n        <div className=\"container\">\r\n             <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n            <div>\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/\" className=\"nav-link\">\r\n                        <i className=\"fas fa-list\"/></Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/contact/add\" className=\"nav-link\">\r\n                        <i className=\"fas fa-plus\"/> </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/about\" className=\"nav-link\">\r\n                        <i className=\"fas fa-question\"/></Link>\r\n                    </li>\r\n                    \r\n                 </ul>  \r\n            </div>\r\n        </div>\r\n   </nav>\r\n  );\r\n};\r\n//defaultProps- built in function- if <Header/>  in app.js (no branding  statement)bthe default branding will be set  \r\nHeader.defaultProps = {\r\n    branding: 'Contact Manager'\r\n}\r\n// validating the data that is in branding property: \r\n//here we set that is should be a string (default or what we set in app.js) by using ==  branding: PropTypes.string.isRequired\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\n\r\n\r\nexport default  Header;","import React from 'react';\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">About my app</h1>\r\n        <p className=\"lead\">just a simple app to manage contacts</p>\r\n        <p className=\"text-secondary\"> v.1.0.0</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default  () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\"> Error <span className=\"text-danger\">404</span> : Page Not Found</h1>\r\n      <p className=\"lead\">Sorry bro</p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\n\r\n  state= {\r\n    title: '',\r\n    body:''\r\n  };\r\n\r\n  //see example for fetch a post : https://jsonplaceholder.typicode.com/\r\n\r\n  componentDidMount(){\r\n    \r\n  //see example for fetch structure : https://jsonplaceholder.typicode.com/  ==== /posts/1!!!!\r\n    fetch ('https://jsonplaceholder.typicode.com/posts/1')\r\n  .then(response => response.json())\r\n  .then(data => \r\n   // console.log(data)\r\n    this.setState({\r\n      title: data.title,\r\n      body: data.body\r\n    })\r\n    \r\n    );\r\n    \r\n  }\r\n \r\n\r\n/* LIFE CYCLE METHODS EXAMPLES\r\n componentDidMount(){\r\n   console.log('is mounted');\r\n }\r\n\r\n componentWillMount(){\r\n  console.log('in mounted');\r\n}\r\n\r\ncomponentDidUpdate(){\r\n  console.log('in mounted');\r\n}\r\n\r\ncomponentWillReceiveProps(nextProps,nextState){\r\n  console.log('in mounted');\r\n}\r\n\r\nstatic getDerivedStateFromProps(nextProps,prevState){\r\n  return {\r\n    test:'somthing'\r\n  };\r\n}\r\n\r\ngetSnapshotBeforeUpdate(prevProps,prevState){\r\n\r\n}\r\n\r\n*/\r\n\r\n  render() {\r\n    const {title, body} = this.state;\r\n    return (\r\n      <div>\r\n        <h1>{title}  </h1>\r\n        <p>{body}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Test;\r\n","import React, { Component } from 'react';\n//import {BrowserRouter as Router, Route, Switch}  from 'react-router-dom';\nimport {HashRouter as Router, Route, Switch}  from 'react-router-dom';\nimport Contact from './components/contacts/Contact.js';\n\nimport Contacts from './components/contacts/Contacts.js';\nimport AddContact from './components/contacts/AddContact.js';\n\nimport EditContact from './components/contacts/EditContact';\n\nimport Header from './components/layout/Header.js';\nimport About from './components/pages/About.js';\nimport NotFound from './components/pages/NotFound.js';\nimport Test from './components/TEST/Test.js';\n\nimport {Provider} from './Context.js';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nclass App extends Component {\n  render() {\n     \n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n           <Header branding=\"My Contact Manager\" />\n             <div className=\"container\" /*we added a div container so all the contacts will align nicely */>\n               <Switch>\n                 <Route exact path=\"/\" component={Contacts} />\n                 <Route exact path=\"/contact/add\" component={AddContact} />\n                 <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                 <Route exact path=\"/about\" component={About} />\n\n\n                 <Route exact path=\"/test\" component={Test} />\n\n                <Route component={NotFound} />\n               </Switch>\n              </div>\n           </div>\n         </Router>\n       </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}